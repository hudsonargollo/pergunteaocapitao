name: Deploy to Cloudflare Workers

on:
  push:
    branches: [main, production]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '20'

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'ask-the-captain/package-lock.json'

      - name: Install dependencies
        working-directory: ask-the-captain
        run: npm ci

      - name: Run type checking
        working-directory: ask-the-captain
        run: npx tsc --noEmit

      - name: Run tests
        working-directory: ask-the-captain
        run: npm run test

      - name: Run linting
        working-directory: ask-the-captain
        run: npm run lint

  build:
    runs-on: ubuntu-latest
    name: Build Application
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'ask-the-captain/package-lock.json'

      - name: Install dependencies
        working-directory: ask-the-captain
        run: npm ci

      - name: Build application
        working-directory: ask-the-captain
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            ask-the-captain/.next/
            ask-the-captain/.open-next/
          retention-days: 1

  deploy-staging:
    runs-on: ubuntu-latest
    name: Deploy to Staging
    needs: [test, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'ask-the-captain/package-lock.json'

      - name: Install dependencies
        working-directory: ask-the-captain
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ask-the-captain/

      - name: Deploy to Cloudflare Workers (Staging)
        working-directory: ask-the-captain
        run: |
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" > .env.production
          npx wrangler deploy --env staging
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Run database migrations (Staging)
        working-directory: ask-the-captain
        run: npx wrangler d1 migrations apply --env staging --remote
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Health check (Staging)
        run: |
          sleep 30
          curl -f ${{ secrets.STAGING_URL }}/api/health || exit 1

  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: [test, build, deploy-staging]
    if: github.ref == 'refs/heads/production' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'ask-the-captain/package-lock.json'

      - name: Install dependencies
        working-directory: ask-the-captain
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ask-the-captain/

      - name: Deploy to Cloudflare Workers (Production)
        working-directory: ask-the-captain
        run: |
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" > .env.production
          npx wrangler deploy --env production
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Run database migrations (Production)
        working-directory: ask-the-captain
        run: npx wrangler d1 migrations apply --env production --remote
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Health check (Production)
        run: |
          sleep 30
          curl -f ${{ secrets.PRODUCTION_URL }}/api/health || exit 1

      - name: Notify deployment success
        if: success()
        run: |
          echo "âœ… Production deployment successful!"
          echo "ðŸš€ Application is live at ${{ secrets.PRODUCTION_URL }}"